variable "eks_cluster_name" { type = string }
variable "eks_azs" { type = list(string) }
variable "eks_worker_cidrs" { type = list(string) }
variable "eks_controller_cidrs" { type = list(string) }
variable "eks_public_loadbalancer_cidrs" { type = list(string) }
variable "eks_internet_gateway" { type = string }

module "eks-network" {
  source                              = "../../modules/eks-network"
  cluster_name                        = var.eks_cluster_name
  worker_subnet_cidrs                 = var.eks_worker_cidrs
  controller_cidrs                    = var.eks_controller_cidrs
  public_loadbalancer_subnet_cidrs    = var.eks_public_loadbalancer_cidrs
  availability_zones                  = var.eks_azs

  vpc_id              = var.vpc_id
  internet_gateway_id = var.eks_internet_gateway
}

module "eks-cluster" {
  source           = "terraform-aws-modules/eks/aws"
  version          = "8.0.0"
  cluster_name     = var.eks_cluster_name
  cluster_version  = "1.15"
  subnets          = module.eks-network.controller_subnet_ids
  vpc_id           = var.vpc_id
  manage_aws_auth  = true
  write_kubeconfig = false


  # managed by us via IRSA, as we dont want all pods on all workers to get these permissions
  attach_worker_autoscaling_policy = false

  map_roles = [
    {
      rolearn  = "arn:aws:iam::${var.aws_account_id}:role/dyhedral-prod-admin"
      username = "arn:aws:iam::${var.aws_account_id}:role/dyhedral-prod-admin"
      groups   = ["system:masters"]
    },
    {
      rolearn  = "arn:aws:iam::${var.aws_account_id}:role/dyhedral-prod-admin-atlantis"
      username = "arn:aws:iam::${var.aws_account_id}:role/dyhedral-prod-admin-atlantis"
      groups   = ["system:masters"]
    },
    {
      rolearn  = "arn:aws:iam::${var.aws_account_id}:role/argocd-application-controller"
      username = "arn:aws:iam::${var.aws_account_id}:role/argocd-application-controller"
      groups   = ["system:masters"]
    },
    {
      rolearn  = "arn:aws:iam::${var.aws_account_id}:role/argocd-server"
      username = "arn:aws:iam::${var.aws_account_id}:role/argocd-server"
      groups   = ["system:masters"]
    },
  ]

  worker_groups = [
    {
      name                  = "${var.environment}-${var.deployment}-eks"
      ami_id                = "ami-087a82f6b78a07557"
      instance_type         = "t3.micro"
      asg_max_size          = 5
      autoscaling_enabled   = true
      protect_from_scale_in = true
      enabled_metrics = [ "GroupDesiredCapacity", "GroupInServiceCapacity", "GroupInServiceInstances", "GroupMaxSize", "GroupMinSize", "GroupPendingCapacity", "GroupPendingInstances", "GroupStandbyCapacity", "GroupStandbyInstances", "GroupTerminatingCapacity", "GroupTerminatingInstances", "GroupTotalCapacity", "GroupTotalInstances" ]
      subnets               = module.eks-network.worker_subnet_ids
    },
  ]

  tags = {
    name        = "${var.environment}-${var.deployment}-eks"
    environment = var.environment
    deployment  = var.deployment
    cluster     = "eks"
  }
}

data "aws_eks_cluster" "cluster" {
  name = module.eks-cluster.cluster_id
}

data "aws_eks_cluster_auth" "cluster" {
  name = module.eks-cluster.cluster_id
}

provider "kubernetes" {
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
  token                  = data.aws_eks_cluster_auth.cluster.token
  load_config_file       = false
  version                = "~> 1.10"
}

resource "aws_iam_openid_connect_provider" "eks" {
  url = module.eks-cluster.cluster_oidc_issuer_url

  client_id_list = [
    "sts.amazonaws.com",
  ]

  thumbprint_list = [
    "598adecb9a3e6cc70aa53d64bd5ee4704300382a",
  ]
}

module "eks_autoscaling_policy" {
  source                    = "../../modules/eks-autoscaling-policy"
  cluster_name              = var.eks_cluster_name
  cluster_oidc_issuer_url   = module.eks-cluster.cluster_oidc_issuer_url
  service_account_namespace = "cluster-autoscaler"
  service_account_name      = "prod-cluster-autoscaler-aws-cluster-autoscaler"
  aws_account_id            = var.aws_account_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module."
  value       = module.eks-cluster.kubeconfig
}

output "config_map_aws_auth" {
  description = "A kubernetes configuration to authenticate to this EKS cluster."
  value       = module.eks-cluster.config_map_aws_auth
}

output "eks_autoscaler_role_arn" {
  value = module.eks_autoscaling_policy.autoscaler_role_arn
}